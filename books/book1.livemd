# ðŸ¥‹ Book I - Matrix

## Welcome to Book I

```elixir
host = :inet.gethostname()
host = :erl_epmd.names()
```

```elixir
input = Kino.Input.text("Your name")
```

```elixir
name = Kino.Input.read(input)
{:ok, class} = Dojo.Class.join(self(), "book1", %Dojo.Disciple{name: name, action: "away"})
```

```elixir
coordinate = [{3, 4}, {2, 5}, {2, 6}]

DojoKino.Animate.new(1..10, fn index ->
  Kino.Markdown.new(Dojo.Conway.genesis("blinker", 10, index, coordinate))
end)
```

```elixir
f = &Dojo.Conway.reduce_genesis("blinker", 7, &1, coordinate)
Dojo.PubSub.publish({name, f}, :animate, "class:book1")
```

```elixir
defmodule ECM do
  def run(start_str, rule, times) do
    IO.puts("rule : #{rule}")
    each(start_str, rule_pattern(rule), times)
  end

  defp rule_pattern(rule) do
    list =
      Integer.to_string(rule, 2)
      |> String.pad_leading(8, "0")
      |> String.codepoints()
      |> Enum.reverse()

    Enum.map(0..7, fn i -> Integer.to_string(i, 2) |> String.pad_leading(3, "0") end)
    |> Enum.zip(list)
    |> Map.new()
  end

  defp each(_, _, 0), do: :ok

  defp each(str, patterns, times) do
    IO.puts(String.replace(str, "0", "â¬œ") |> String.replace("1", "â¬›"))
    str2 = String.last(str) <> str <> String.first(str)

    next_str =
      Enum.map_join(0..(String.length(str) - 1), fn i ->
        Map.get(patterns, String.slice(str2, i, 3))
      end)

    each(next_str, patterns, times - 1)
  end
end

pad = String.duplicate("0", 14)
str = pad <> "1" <> pad
ECM.run(str, 90, 4)
```

```elixir
DojoKino.Animate.new(1..10, fn index -> ECM.run(str, 90, index) end)
```

```elixir
defmodule GOL do
  # ...

  def next_generation(grid) do
    # Define the convolution kernel for the Game of Life rules
    kernel = [
      [1, 1, 1],
      [1, 0, 1],
      [1, 1, 1]
    ]

    # Apply the convolution to the grid
    convolution(grid, kernel)
  end

  defp convolution(grid, kernel) do
    # Implement the convolution operation here
    # This involves sliding the kernel over the grid and applying the rules
    # For simplicity, we'll assume a basic implementation that counts neighbors
    # and applies the Game of Life rules
    Enum.map(grid, fn row, y ->
      Enum.map(row, fn cell, x ->
        # Calculate the sum of the kernel applied to the cell
        sum =
          Enum.sum(Enum.with_index(kernel), fn {row, ky}, i ->
            Enum.sum(Enum.with_index(row), fn cell, kx ->
              if kx + i < 0 or kx + i >= length(row) or ky + y < 0 or ky + y >= length(grid) do
                0
              else
                Enum.at(Enum.at(grid, ky + y), kx + i)
              end
            end)
          end)

        # Apply the Game of Life rules
        if cell == 1 and (sum == 2 or sum == 3) do
          1
        else
          if cell == 0 and sum == 3 do
            1
          else
            0
          end
        end
      end)
    end)
  end
end
```

```elixir
defmodule KinoGuide.ShellCell do
  use Kino.JS
  use Kino.JS.Live
  use Kino.SmartCell, name: "Shell script"

  @impl true
  def init(_attrs, ctx) do
    {:ok, ctx, editor: [attribute: "source"]}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, %{}, ctx}
  end

  @impl true
  def to_attrs(_ctx) do
    %{}
  end

  @impl true
  def to_source(attrs) do
    quote do
      System.shell(
        unquote(quoted_multiline(attrs["source"])),
        into: IO.stream(),
        stderr_to_stdout: true
      )
      |> elem(1)
    end
    |> Kino.SmartCell.quoted_to_string()
  end

  defp quoted_multiline(string) do
    {:<<>>, [delimiter: ~s["""]], [string <> "\n"]}
  end

  asset "main.js" do
    """
    export function init(ctx, payload) {
      ctx.importCSS("main.css");

      root.innerHTML = `
        <div class="app">
          Shell script
        </div>
      `;
    }
    """
  end

  asset "main.css" do
    """
    .app {
      padding: 8px 16px;
      border: solid 1px #cad5e0;
      border-radius: 0.5rem 0.5rem 0 0;
      border-bottom: none;
    }
    """
  end
end

Kino.SmartCell.register(KinoGuide.ShellCell)
```

```elixir
defmodule Kino.TailwindPlayground do
  use Kino.JS
  use Kino.JS.Live
  use Kino.SmartCell, name: "Tailwind Playground"
  require Logger

  @impl true
  def init(attrs, ctx) do
    {:ok, assign(ctx, initial_html: attrs["html"] || ""),
     editor: [attribute: "html", language: "html", placement: :top]}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, %{}, ctx}
  end

  @impl true
  def handle_event("initial-render", %{}, ctx) do
    Process.send_after(self(), {:display_html, ctx.assigns.initial_html}, 100)
    {:noreply, ctx}
  end

  @impl true
  def to_attrs(_ctx) do
    %{}
  end

  @impl true
  def to_source(attrs) do
    # we can't encode ctx in attrs so we send ourselves a message in order to display the html.
    send(self(), {:display_html, attrs["html"]})
    "Kino.nothing()"
  end

  @impl true
  def handle_info({:display_html, html}, ctx) do
    broadcast_event(ctx, "display-html", %{"html" => html})
    {:noreply, ctx}
  end

  asset "main.css" do
    """
    .wrapper {
      position: relative;
      width: 100%;
      height: 100%;
      overflow-x: auto;
      background-color: white;
    }

    svg {
      pointer-events: none;
    }

    .size-btn {
      color: white;
      border-radius: 8px;
      border-style: none;
      background-color: #33394c;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 4px;
    }

    .active {
      background-color: #495e7c;
    }

    .button-header {
      padding: 12px;
      background-color: #0f182a;
      display: flex;
      gap: 8px;
    }

    #iframe {
      background-color: white;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: none;
      display: block;
      margin-left: auto;
      margin-right: auto;
      overflow: auto;
    }

    #iframe-container {
      max-width: 100%;
      display: block;
      background-color: #292c34;
      height: 570px;
      resize: vertical;
      overflow: hidden;
      position: relative;
      padding: 0 5px 5px;
    }
    """
  end

  asset "main.js" do
    """
    export function init(ctx, payload) {
      ctx.importCSS("main.css");

      ctx.root.innerHTML = `
        <div class="wrapper">
          <div class="button-header">
            <button data-width="375px" class="size-btn text-sm">
              xs
            </button>
            <button data-width="640px" class="size-btn text-sm">
              sm
            </button>
            <button data-width="768px" class="size-btn text-sm">
              md
            </button>
            <button data-width="100%" class="size-btn active">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25m18 0A2.25 2.25 0 0018.75 3H5.25A2.25 2.25 0 003 5.25m18 0V12a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 12V5.25" />
              </svg>
            </button>
          </div>
          <div id="iframe-container">
            <iframe id="iframe" loading="eager" width="100%" height="100%"></iframe>
          </div>
        </div>
      `
      ctx
        .importJS(
          "https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio"
        )
        .then(() => {
          let iframe = ctx.root.querySelector("#iframe");
          let buttons = document.querySelectorAll(".size-btn");

          iframe.srcdoc = `
            <head>
              <script src='https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio'></script>
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
            </head>
            <body id="body">
            </body>
          `
          buttons.forEach((btn) => {
            btn.addEventListener("click", (e) => {
              iframe.style.maxWidth = e.target.dataset.width;
              buttons.forEach((btn) => { btn.classList.remove("active") })
              e.target.classList.add("active")
            });
          });

          ctx.handleEvent("display-html", ({ html }) => {
            let body = iframe.contentWindow.document.querySelector("#body");
            body.innerHTML = html
          });

          ctx.pushEvent("initial-render", { });

          ctx.handleSync(() => {
            // Synchronously invokes change listeners
            document.activeElement && document.activeElement.dispatchEvent(new Event("change"));
          });
        });
    }
    """
  end
end

Kino.SmartCell.register(Kino.TailwindPlayground)
```

<!-- livebook:{"attrs":"eyJodG1sIjoiPCFkb2N0eXBlIGh0bWw+XG48aHRtbD5cbjxoZWFkPlxuICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIj5cbiAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIj5cbiAgPHN0eWxlPlxuICAgIEBrZXlmcmFtZXMgYm91bmNlIHtcbiAgICAgIDAlLCAxMDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDIwMHB4KTsgfVxuICAgICAgNTAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwMHB4KTsgfVxuICAgIH1cbiAgPC9zdHlsZT5cbjwvaGVhZD5cbjxib2R5IGNsYXNzPVwiYmctZ3JhZGllbnQtdG8tciBmcm9tLXBpbmstNDAwIHZpYS1wdXJwbGUtNTAwIHRvLWluZGlnby01MDAgbWluLWgtc2NyZWVuIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gIDxkaXYgY2xhc3M9XCJiZy13aGl0ZSBwLTYgcm91bmRlZC1sZyBzaGFkb3cteGwgbWF4LXctbWQgYW5pbWF0ZS1ib3VuY2VcIj5cbiAgICA8aDEgY2xhc3M9XCJ0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1jZW50ZXIgbWItNFwiPkhlbGxvIGZyb20gQWNtZSE8L2gxPlxuICAgIDxwIGNsYXNzPVwidGV4dC1sZyB0ZXh0LWNlbnRlclwiPldlbGNvbWUgdG8gb3VyIG1hZ2ljYWwgd29ybGQuPC9wPlxuICA8L2Rpdj5cbiAgXG48L2JvZHk+XG48L2h0bWw+XG4ifQ","chunks":null,"kind":"Elixir.Kino.TailwindPlayground","livebook_object":"smart_cell"} -->

```elixir
Kino.nothing()
```

```elixir
Dojo.PubSub.publish(
  "class:book1",
  {name,
   """
   <!doctype html>
   <html>
   <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <style>
       @keyframes bounce {
         0%, 100% { transform: translateY(200px); }
         50% { transform: translateY(500px); }
       }
     </style>
   </head>
   <body class="bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 min-h-screen flex items-center justify-center">
     <div class="bg-white p-6 rounded-lg shadow-xl max-w-md animate-bounce">
       <h1 class="text-5xl font-bold text-center mb-4">Hello from Acme!</h1>
       <p class="text-lg text-center">Welcome to our magical world.</p>
     </div>
     
   </body>
   </html>
   """}
)
```

```elixir
require Dojo.Module

# String.to_atom("Brit")

Dojo.Module.generate(name, "hellod")

# :erlang.binary_to_existing_atom("Elixir.Dojo.PubSub", :utf8)
# Module.con
```

```elixir
Dojo.Mat.Brit.hello()
```
